@export
SahaParser = parsed:SahaStatementNodes $;

@no_skip_ws
SahaStatementNodes = { statements:SahaStatement };

SahaStatement =
	@:SlotExpressionNode |
	@:SlotFor |
	@:SlotIf |
	@:Comment |
	@:UnicodeText
;

@no_skip_ws
SlotIf = start:SlotIfStart body:SahaStatementNodes [else:SlotElse empty:SahaStatementNodes] end:SlotEndIf;

SlotIfStart = left:SlotL "if" value:ValueNode right:SlotR;

SlotElse = left:SlotL "else" right:SlotR;

SlotEndIf = left:SlotL EndIf right:SlotR;

@no_skip_ws
EndIf = 'end' [['-'|'_'] "if"];




@no_skip_ws
SlotFor = start:SlotForStart body:SahaStatementNodes [else:SlotElse empty:SahaStatementNodes] end:SlotEndFor;

SlotForStart = left:SlotL "for" pattern:ValueNode "in" expression:ValueNode right:SlotR;

SlotEndFor = left:SlotL EndFor right:SlotR;

@no_skip_ws
EndFor = 'end' [['-'|'_'] "for"];

@check(crate::utils::check_slot_expression)
SlotExpressionNode = left:SlotL e:ExpressionNode right:SlotR;

ExpressionNode = head:ValueNode {infix:ExpressionNodeInfix};

ExpressionNodeInfix = op:Infix value:ValueNode;

@string
Infix = "+";

ValueNode =
	@:SpecialNode |
	@:NumberNode |
	@:IdentifierNode
;

@no_skip_ws
@position
SlotL = "{%" [trim:TrimMode];

@no_skip_ws
@position
SlotR = [trim:TrimMode] "%}";



@char
TrimMode = '_' | '-' | '=' | '!';

@string
@position
SpecialNode = 'null' | 'true' | 'false';

@string
@position
@no_skip_ws
IdentifierNode = (XID_START | '_' | '-') {XID_CONTINUE | '-'};

@char
@check(unicode_ident::is_xid_start)
XID_START = char;

@char
@check(unicode_ident::is_xid_continue)
XID_CONTINUE = char;


@position
@string
NumberNode =
	{'0'..'9'}+ ['.' {'0'..'9'}+] [('**'|'e'|'E') ['+'|'-'] {'0'..'9'}+] |
	'.' {'0'..'9'}+
	;

@position
@string
UnicodeText = {!("{%" | "{#") char}+;

@no_skip_ws
Comment = left:CommentL {!CommentR|char}+ right:CommentR;

@no_skip_ws
@position
CommentL = "{#" [trim:TrimMode];

@no_skip_ws
@position
CommentR = [trim:TrimMode] "#}";
