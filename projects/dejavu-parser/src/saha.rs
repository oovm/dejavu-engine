// This file was generated by Peginator v0.4.0
// Hash of the grammar file: D642D40F37612A7072AA8FE5014C9924F66EB108207E54DB94CC447C3E982416
// Any changes to it will be lost on regeneration

#[derive(Debug, Clone)]
pub struct SahaParser {
    pub parsed: SahaStatementNodes,
}
#[derive(Debug, Clone)]
pub struct SahaStatementNodes {
    pub statements: Vec<SahaStatement>,
}
#[allow(non_camel_case_types)]
#[derive(Debug, Clone)]
pub enum SahaStatement {
    Comment(Comment),
    SlotExpressionNode(SlotExpressionNode),
    SlotFor(SlotFor),
    SlotIf(SlotIf),
    UnicodeText(UnicodeText),
}
#[derive(Debug, Clone)]
pub struct SlotIf {
    pub start: SlotIfStart,
    pub body: SahaStatementNodes,
    pub r#else: Option<SlotElse>,
    pub empty: Option<SahaStatementNodes>,
    pub end: SlotEndIf,
}
#[derive(Debug, Clone)]
pub struct SlotIfStart {
    pub left: SlotL,
    pub value: ValueNode,
    pub right: SlotR,
}
#[derive(Debug, Clone)]
pub struct SlotElse {
    pub left: SlotL,
    pub right: SlotR,
}
#[derive(Debug, Clone)]
pub struct SlotEndIf {
    pub left: SlotL,
    pub right: SlotR,
}
#[derive(Debug, Clone)]
pub struct EndIf;
#[derive(Debug, Clone)]
pub struct SlotFor {
    pub start: SlotForStart,
    pub body: SahaStatementNodes,
    pub r#else: Option<SlotElse>,
    pub empty: Option<SahaStatementNodes>,
    pub end: SlotEndFor,
}
#[derive(Debug, Clone)]
pub struct SlotForStart {
    pub left: SlotL,
    pub pattern: ValueNode,
    pub expression: ValueNode,
    pub right: SlotR,
}
#[derive(Debug, Clone)]
pub struct SlotEndFor {
    pub left: SlotL,
    pub right: SlotR,
}
#[derive(Debug, Clone)]
pub struct EndFor;
#[derive(Debug, Clone)]
pub struct SlotExpressionNode {
    pub left: SlotL,
    pub e: ExpressionNode,
    pub right: SlotR,
}
#[derive(Debug, Clone)]
pub struct ExpressionNode {
    pub head: ValueNode,
    pub infix: Vec<ExpressionNodeInfix>,
}
#[derive(Debug, Clone)]
pub struct ExpressionNodeInfix {
    pub op: Infix,
    pub value: ValueNode,
}
pub type Infix = String;
#[allow(non_camel_case_types)]
#[derive(Debug, Clone)]
pub enum ValueNode {
    BooleanNode(BooleanNode),
    IdentifierNode(IdentifierNode),
    NumberNode(NumberNode),
}
#[derive(Debug, Clone)]
pub struct SlotL {
    pub trim: Option<TrimMode>,
    pub position: std::ops::Range<usize>,
}
#[derive(Debug, Clone)]
pub struct SlotR {
    pub trim: Option<TrimMode>,
    pub position: std::ops::Range<usize>,
}
pub type TrimMode = char;
#[derive(Debug, Clone)]
pub struct BooleanNode {
    pub string: String,
    pub position: std::ops::Range<usize>,
}
#[derive(Debug, Clone)]
pub struct IdentifierNode {
    pub string: String,
    pub position: std::ops::Range<usize>,
}
pub type XID_START = char;
pub type XID_CONTINUE = char;
#[derive(Debug, Clone)]
pub struct NumberNode {
    pub string: String,
    pub position: std::ops::Range<usize>,
}
#[derive(Debug, Clone)]
pub struct UnicodeText {
    pub string: String,
    pub position: std::ops::Range<usize>,
}
#[derive(Debug, Clone)]
pub struct Comment {
    pub left: CommentL,
    pub right: CommentR,
}
#[derive(Debug, Clone)]
pub struct CommentL {
    pub trim: Option<TrimMode>,
    pub position: std::ops::Range<usize>,
}
#[derive(Debug, Clone)]
pub struct CommentR {
    pub trim: Option<TrimMode>,
    pub position: std::ops::Range<usize>,
}
impl peginator_generated::PegParser for SahaParser {
    fn parse_advanced<T: peginator_generated::ParseTracer>(
        s: &str,
        settings: &peginator_generated::ParseSettings,
    ) -> Result<Self, peginator_generated::ParseError> {
        Ok(peginator_generated::parse_SahaParser(
            peginator_generated::ParseState::new(s, settings),
            T::new(),
            &mut Default::default(),
        )?
        .result)
    }
}
#[allow(non_snake_case, unused_variables, unused_imports, unused_mut, dead_code)]
mod peginator_generated {
    use super::*;
    use peginator::runtime::*;
    pub use peginator::runtime::{IndentedTracer, ParseError, ParseSettings, ParseState, ParseTracer, PegParser, PegPosition};
    #[derive(Default)]
    pub struct ParseCache<'a> {
        _please_dont_complain: std::marker::PhantomData<&'a ()>,
    }
    mod SahaParser_impl {
        use super::*;
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let ParseOk { result: parsed, state } = parse_Whitespace(state, tracer, cache)
                .and_then(|ParseOk { state, .. }| parse_SahaStatementNodes(state, tracer, cache))?;
            let ParseOk { state, .. } =
                parse_Whitespace(state, tracer, cache).and_then(|ParseOk { state, .. }| parse_end_of_input(state))?;
            Ok(ParseOk { result: parsed, state })
        }
        pub type Parsed = SahaStatementNodes;
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::SahaParser> {
            let result = parse(state, tracer, cache)?.map(|r| super::SahaParser { parsed: r });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_SahaParser<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, SahaParser> {
        tracer.run_traced("SahaParser", state, |state, tracer| SahaParser_impl::rule_parser(state, tracer, cache))
    }
    mod SahaStatementNodes_impl {
        use super::*;
        mod closure {
            use super::*;
        }
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let mut iterations: usize = 0;
            let mut state = state;
            let mut statements: Vec<SahaStatement> = Vec::new();
            loop {
                match parse_SahaStatement(state.clone(), tracer, cache).map_inner(|result| vec![result]) {
                    Ok(ParseOk { result: __result, state: new_state, .. }) => {
                        statements.extend(__result);
                        state = new_state;
                    }
                    Err(err) => {
                        state = state.record_error(err);
                        break;
                    }
                }
                iterations += 1;
            }
            Ok(ParseOk { result: statements, state })
        }
        pub type Parsed = Vec<SahaStatement>;
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::SahaStatementNodes> {
            let result = parse(state, tracer, cache)?.map(|r| super::SahaStatementNodes { statements: r });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_SahaStatementNodes<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, SahaStatementNodes> {
        tracer
            .run_traced("SahaStatementNodes", state, |state, tracer| SahaStatementNodes_impl::rule_parser(state, tracer, cache))
    }
    mod SahaStatement_impl {
        use super::*;
        #[inline(always)]
        pub fn parse<'a>(
            mut state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            ChoiceHelper::new(state)
                .choice(|state| {
                    parse_Whitespace(state, tracer, cache)
                        .and_then(|ParseOk { state, .. }| parse_SlotExpressionNode(state, tracer, cache))
                        .map_inner(Parsed__override::SlotExpressionNode)
                })
                .choice(|state| {
                    parse_Whitespace(state, tracer, cache)
                        .and_then(|ParseOk { state, .. }| parse_SlotFor(state, tracer, cache))
                        .map_inner(Parsed__override::SlotFor)
                })
                .choice(|state| {
                    parse_Whitespace(state, tracer, cache)
                        .and_then(|ParseOk { state, .. }| parse_SlotIf(state, tracer, cache))
                        .map_inner(Parsed__override::SlotIf)
                })
                .choice(|state| {
                    parse_Whitespace(state, tracer, cache)
                        .and_then(|ParseOk { state, .. }| parse_Comment(state, tracer, cache))
                        .map_inner(Parsed__override::Comment)
                })
                .choice(|state| {
                    parse_Whitespace(state, tracer, cache)
                        .and_then(|ParseOk { state, .. }| parse_UnicodeText(state, tracer, cache))
                        .map_inner(Parsed__override::UnicodeText)
                })
                .end()
        }
        pub type Parsed = Parsed__override;
        use super::SahaStatement as Parsed__override;
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::SahaStatement> {
            let result = parse(state, tracer, cache)?;
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_SahaStatement<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, SahaStatement> {
        tracer.run_traced("SahaStatement", state, |state, tracer| SahaStatement_impl::rule_parser(state, tracer, cache))
    }
    mod SlotIf_impl {
        use super::*;
        mod part_2 {
            use super::*;
            mod optional {
                use super::*;
                #[inline(always)]
                pub fn parse<'a>(
                    state: ParseState<'a>,
                    tracer: impl ParseTracer,
                    cache: &mut ParseCache<'a>,
                ) -> ParseResult<'a, Parsed> {
                    let ParseOk { result: r#else, state } = parse_SlotElse(state, tracer, cache).map_inner(Some)?;
                    let ParseOk { result: empty, state } = parse_SahaStatementNodes(state, tracer, cache).map_inner(Some)?;
                    Ok(ParseOk { result: Parsed { r#else, empty }, state })
                }
                pub struct Parsed {
                    pub r#else: Option<SlotElse>,
                    pub empty: Option<SahaStatementNodes>,
                }
            }
            #[inline(always)]
            pub fn parse<'a>(
                state: ParseState<'a>,
                tracer: impl ParseTracer,
                cache: &mut ParseCache<'a>,
            ) -> ParseResult<'a, Parsed> {
                optional::parse(state.clone(), tracer, cache)
                    .map_inner(|result| Parsed { r#else: result.r#else, empty: result.empty })
                    .or_else(|err| {
                        Ok(ParseOk {
                            result: Parsed { r#else: Default::default(), empty: Default::default() },
                            state: state.record_error(err),
                        })
                    })
            }
            pub struct Parsed {
                pub r#else: Option<SlotElse>,
                pub empty: Option<SahaStatementNodes>,
            }
        }
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let ParseOk { result: start, state } = parse_SlotIfStart(state, tracer, cache)?;
            let ParseOk { result: body, state } = parse_SahaStatementNodes(state, tracer, cache)?;
            let ParseOk { result: part_2::Parsed { r#else, empty }, state } = part_2::parse(state, tracer, cache)?;
            let ParseOk { result: end, state } = parse_SlotEndIf(state, tracer, cache)?;
            Ok(ParseOk { result: Parsed { start, body, r#else, empty, end }, state })
        }
        pub struct Parsed {
            pub start: SlotIfStart,
            pub body: SahaStatementNodes,
            pub r#else: Option<SlotElse>,
            pub empty: Option<SahaStatementNodes>,
            pub end: SlotEndIf,
        }
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::SlotIf> {
            let result = parse(state, tracer, cache)?.map(|r| super::SlotIf {
                start: r.start,
                body: r.body,
                r#else: r.r#else,
                empty: r.empty,
                end: r.end,
            });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_SlotIf<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, SlotIf> {
        tracer.run_traced("SlotIf", state, |state, tracer| SlotIf_impl::rule_parser(state, tracer, cache))
    }
    mod SlotIfStart_impl {
        use super::*;
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let ParseOk { result: left, state } =
                parse_Whitespace(state, tracer, cache).and_then(|ParseOk { state, .. }| parse_SlotL(state, tracer, cache))?;
            let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)
                .and_then(|ParseOk { state, .. }| parse_string_literal(state, "if"))
                .discard_result()?;
            let ParseOk { result: value, state } = parse_Whitespace(state, tracer, cache)
                .and_then(|ParseOk { state, .. }| parse_ValueNode(state, tracer, cache))?;
            let ParseOk { result: right, state } =
                parse_Whitespace(state, tracer, cache).and_then(|ParseOk { state, .. }| parse_SlotR(state, tracer, cache))?;
            Ok(ParseOk { result: Parsed { left, value, right }, state })
        }
        pub struct Parsed {
            pub left: SlotL,
            pub value: ValueNode,
            pub right: SlotR,
        }
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::SlotIfStart> {
            let result =
                parse(state, tracer, cache)?.map(|r| super::SlotIfStart { left: r.left, value: r.value, right: r.right });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_SlotIfStart<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, SlotIfStart> {
        tracer.run_traced("SlotIfStart", state, |state, tracer| SlotIfStart_impl::rule_parser(state, tracer, cache))
    }
    mod SlotElse_impl {
        use super::*;
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let ParseOk { result: left, state } =
                parse_Whitespace(state, tracer, cache).and_then(|ParseOk { state, .. }| parse_SlotL(state, tracer, cache))?;
            let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)
                .and_then(|ParseOk { state, .. }| parse_string_literal(state, "else"))
                .discard_result()?;
            let ParseOk { result: right, state } =
                parse_Whitespace(state, tracer, cache).and_then(|ParseOk { state, .. }| parse_SlotR(state, tracer, cache))?;
            Ok(ParseOk { result: Parsed { left, right }, state })
        }
        pub struct Parsed {
            pub left: SlotL,
            pub right: SlotR,
        }
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::SlotElse> {
            let result = parse(state, tracer, cache)?.map(|r| super::SlotElse { left: r.left, right: r.right });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_SlotElse<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, SlotElse> {
        tracer.run_traced("SlotElse", state, |state, tracer| SlotElse_impl::rule_parser(state, tracer, cache))
    }
    mod SlotEndIf_impl {
        use super::*;
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let ParseOk { result: left, state } =
                parse_Whitespace(state, tracer, cache).and_then(|ParseOk { state, .. }| parse_SlotL(state, tracer, cache))?;
            let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)
                .and_then(|ParseOk { state, .. }| parse_EndIf(state, tracer, cache))
                .discard_result()?;
            let ParseOk { result: right, state } =
                parse_Whitespace(state, tracer, cache).and_then(|ParseOk { state, .. }| parse_SlotR(state, tracer, cache))?;
            Ok(ParseOk { result: Parsed { left, right }, state })
        }
        pub struct Parsed {
            pub left: SlotL,
            pub right: SlotR,
        }
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::SlotEndIf> {
            let result = parse(state, tracer, cache)?.map(|r| super::SlotEndIf { left: r.left, right: r.right });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_SlotEndIf<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, SlotEndIf> {
        tracer.run_traced("SlotEndIf", state, |state, tracer| SlotEndIf_impl::rule_parser(state, tracer, cache))
    }
    mod EndIf_impl {
        use super::*;
        mod part_1 {
            use super::*;
            mod optional {
                use super::*;
                #[inline(always)]
                pub fn parse<'a>(
                    state: ParseState<'a>,
                    tracer: impl ParseTracer,
                    cache: &mut ParseCache<'a>,
                ) -> ParseResult<'a, Parsed> {
                    let ParseOk { state, .. } = ChoiceHelper::new(state.clone())
                        .choice(|state| parse_character_literal(state, '-').discard_result())
                        .choice(|state| parse_character_literal(state, '_').discard_result())
                        .end()
                        .or_else(|err| Ok(ParseOk { result: (), state: state.record_error(err) }))?;
                    let ParseOk { state, .. } = parse_string_literal(state, "if").discard_result()?;
                    Ok(ParseOk { result: (), state })
                }
                pub type Parsed = ();
            }
            #[inline(always)]
            pub fn parse<'a>(
                state: ParseState<'a>,
                tracer: impl ParseTracer,
                cache: &mut ParseCache<'a>,
            ) -> ParseResult<'a, Parsed> {
                optional::parse(state.clone(), tracer, cache)
                    .or_else(|err| Ok(ParseOk { result: (), state: state.record_error(err) }))
            }
            pub type Parsed = ();
        }
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let ParseOk { state, .. } = parse_string_literal(state, "end").discard_result()?;
            let ParseOk { state, .. } = part_1::parse(state, tracer, cache)?;
            Ok(ParseOk { result: (), state })
        }
        pub type Parsed = ();
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::EndIf> {
            let result = parse(state, tracer, cache)?.map(|r| super::EndIf {});
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_EndIf<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, EndIf> {
        tracer.run_traced("EndIf", state, |state, tracer| EndIf_impl::rule_parser(state, tracer, cache))
    }
    mod SlotFor_impl {
        use super::*;
        mod part_2 {
            use super::*;
            mod optional {
                use super::*;
                #[inline(always)]
                pub fn parse<'a>(
                    state: ParseState<'a>,
                    tracer: impl ParseTracer,
                    cache: &mut ParseCache<'a>,
                ) -> ParseResult<'a, Parsed> {
                    let ParseOk { result: r#else, state } = parse_SlotElse(state, tracer, cache).map_inner(Some)?;
                    let ParseOk { result: empty, state } = parse_SahaStatementNodes(state, tracer, cache).map_inner(Some)?;
                    Ok(ParseOk { result: Parsed { r#else, empty }, state })
                }
                pub struct Parsed {
                    pub r#else: Option<SlotElse>,
                    pub empty: Option<SahaStatementNodes>,
                }
            }
            #[inline(always)]
            pub fn parse<'a>(
                state: ParseState<'a>,
                tracer: impl ParseTracer,
                cache: &mut ParseCache<'a>,
            ) -> ParseResult<'a, Parsed> {
                optional::parse(state.clone(), tracer, cache)
                    .map_inner(|result| Parsed { r#else: result.r#else, empty: result.empty })
                    .or_else(|err| {
                        Ok(ParseOk {
                            result: Parsed { r#else: Default::default(), empty: Default::default() },
                            state: state.record_error(err),
                        })
                    })
            }
            pub struct Parsed {
                pub r#else: Option<SlotElse>,
                pub empty: Option<SahaStatementNodes>,
            }
        }
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let ParseOk { result: start, state } = parse_SlotForStart(state, tracer, cache)?;
            let ParseOk { result: body, state } = parse_SahaStatementNodes(state, tracer, cache)?;
            let ParseOk { result: part_2::Parsed { r#else, empty }, state } = part_2::parse(state, tracer, cache)?;
            let ParseOk { result: end, state } = parse_SlotEndFor(state, tracer, cache)?;
            Ok(ParseOk { result: Parsed { start, body, r#else, empty, end }, state })
        }
        pub struct Parsed {
            pub start: SlotForStart,
            pub body: SahaStatementNodes,
            pub r#else: Option<SlotElse>,
            pub empty: Option<SahaStatementNodes>,
            pub end: SlotEndFor,
        }
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::SlotFor> {
            let result = parse(state, tracer, cache)?.map(|r| super::SlotFor {
                start: r.start,
                body: r.body,
                r#else: r.r#else,
                empty: r.empty,
                end: r.end,
            });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_SlotFor<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, SlotFor> {
        tracer.run_traced("SlotFor", state, |state, tracer| SlotFor_impl::rule_parser(state, tracer, cache))
    }
    mod SlotForStart_impl {
        use super::*;
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let ParseOk { result: left, state } =
                parse_Whitespace(state, tracer, cache).and_then(|ParseOk { state, .. }| parse_SlotL(state, tracer, cache))?;
            let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)
                .and_then(|ParseOk { state, .. }| parse_string_literal(state, "for"))
                .discard_result()?;
            let ParseOk { result: pattern, state } = parse_Whitespace(state, tracer, cache)
                .and_then(|ParseOk { state, .. }| parse_ValueNode(state, tracer, cache))?;
            let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)
                .and_then(|ParseOk { state, .. }| parse_string_literal(state, "in"))
                .discard_result()?;
            let ParseOk { result: expression, state } = parse_Whitespace(state, tracer, cache)
                .and_then(|ParseOk { state, .. }| parse_ValueNode(state, tracer, cache))?;
            let ParseOk { result: right, state } =
                parse_Whitespace(state, tracer, cache).and_then(|ParseOk { state, .. }| parse_SlotR(state, tracer, cache))?;
            Ok(ParseOk { result: Parsed { left, pattern, expression, right }, state })
        }
        pub struct Parsed {
            pub left: SlotL,
            pub pattern: ValueNode,
            pub expression: ValueNode,
            pub right: SlotR,
        }
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::SlotForStart> {
            let result = parse(state, tracer, cache)?.map(|r| super::SlotForStart {
                left: r.left,
                pattern: r.pattern,
                expression: r.expression,
                right: r.right,
            });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_SlotForStart<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, SlotForStart> {
        tracer.run_traced("SlotForStart", state, |state, tracer| SlotForStart_impl::rule_parser(state, tracer, cache))
    }
    mod SlotEndFor_impl {
        use super::*;
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let ParseOk { result: left, state } =
                parse_Whitespace(state, tracer, cache).and_then(|ParseOk { state, .. }| parse_SlotL(state, tracer, cache))?;
            let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)
                .and_then(|ParseOk { state, .. }| parse_EndFor(state, tracer, cache))
                .discard_result()?;
            let ParseOk { result: right, state } =
                parse_Whitespace(state, tracer, cache).and_then(|ParseOk { state, .. }| parse_SlotR(state, tracer, cache))?;
            Ok(ParseOk { result: Parsed { left, right }, state })
        }
        pub struct Parsed {
            pub left: SlotL,
            pub right: SlotR,
        }
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::SlotEndFor> {
            let result = parse(state, tracer, cache)?.map(|r| super::SlotEndFor { left: r.left, right: r.right });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_SlotEndFor<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, SlotEndFor> {
        tracer.run_traced("SlotEndFor", state, |state, tracer| SlotEndFor_impl::rule_parser(state, tracer, cache))
    }
    mod EndFor_impl {
        use super::*;
        mod part_1 {
            use super::*;
            mod optional {
                use super::*;
                #[inline(always)]
                pub fn parse<'a>(
                    state: ParseState<'a>,
                    tracer: impl ParseTracer,
                    cache: &mut ParseCache<'a>,
                ) -> ParseResult<'a, Parsed> {
                    let ParseOk { state, .. } = ChoiceHelper::new(state.clone())
                        .choice(|state| parse_character_literal(state, '-').discard_result())
                        .choice(|state| parse_character_literal(state, '_').discard_result())
                        .end()
                        .or_else(|err| Ok(ParseOk { result: (), state: state.record_error(err) }))?;
                    let ParseOk { state, .. } = parse_string_literal(state, "for").discard_result()?;
                    Ok(ParseOk { result: (), state })
                }
                pub type Parsed = ();
            }
            #[inline(always)]
            pub fn parse<'a>(
                state: ParseState<'a>,
                tracer: impl ParseTracer,
                cache: &mut ParseCache<'a>,
            ) -> ParseResult<'a, Parsed> {
                optional::parse(state.clone(), tracer, cache)
                    .or_else(|err| Ok(ParseOk { result: (), state: state.record_error(err) }))
            }
            pub type Parsed = ();
        }
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let ParseOk { state, .. } = parse_string_literal(state, "end").discard_result()?;
            let ParseOk { state, .. } = part_1::parse(state, tracer, cache)?;
            Ok(ParseOk { result: (), state })
        }
        pub type Parsed = ();
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::EndFor> {
            let result = parse(state, tracer, cache)?.map(|r| super::EndFor {});
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_EndFor<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, EndFor> {
        tracer.run_traced("EndFor", state, |state, tracer| EndFor_impl::rule_parser(state, tracer, cache))
    }
    mod SlotExpressionNode_impl {
        use super::*;
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let ParseOk { result: left, state } =
                parse_Whitespace(state, tracer, cache).and_then(|ParseOk { state, .. }| parse_SlotL(state, tracer, cache))?;
            let ParseOk { result: e, state } = parse_Whitespace(state, tracer, cache)
                .and_then(|ParseOk { state, .. }| parse_ExpressionNode(state, tracer, cache))?;
            let ParseOk { result: right, state } =
                parse_Whitespace(state, tracer, cache).and_then(|ParseOk { state, .. }| parse_SlotR(state, tracer, cache))?;
            Ok(ParseOk { result: Parsed { left, e, right }, state })
        }
        pub struct Parsed {
            pub left: SlotL,
            pub e: ExpressionNode,
            pub right: SlotR,
        }
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::SlotExpressionNode> {
            let result =
                parse(state, tracer, cache)?.map(|r| super::SlotExpressionNode { left: r.left, e: r.e, right: r.right });
            if !crate::utils::check_slot_expression(&result.result) {
                return Err(result.state.report_error(ParseErrorSpecifics::CheckFunctionFailed {
                    function_name: "crate::utils::check_slot_expression",
                }));
            }
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_SlotExpressionNode<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, SlotExpressionNode> {
        tracer
            .run_traced("SlotExpressionNode", state, |state, tracer| SlotExpressionNode_impl::rule_parser(state, tracer, cache))
    }
    mod ExpressionNode_impl {
        use super::*;
        mod part_1 {
            use super::*;
            mod closure {
                use super::*;
            }
            #[inline(always)]
            pub fn parse<'a>(
                state: ParseState<'a>,
                tracer: impl ParseTracer,
                cache: &mut ParseCache<'a>,
            ) -> ParseResult<'a, Parsed> {
                let mut iterations: usize = 0;
                let mut state = state;
                let mut infix: Vec<ExpressionNodeInfix> = Vec::new();
                loop {
                    match parse_Whitespace(state.clone(), tracer, cache)
                        .and_then(|ParseOk { state, .. }| parse_ExpressionNodeInfix(state, tracer, cache))
                        .map_inner(|result| vec![result])
                    {
                        Ok(ParseOk { result: __result, state: new_state, .. }) => {
                            infix.extend(__result);
                            state = new_state;
                        }
                        Err(err) => {
                            state = state.record_error(err);
                            break;
                        }
                    }
                    iterations += 1;
                }
                Ok(ParseOk { result: infix, state })
            }
            pub type Parsed = Vec<ExpressionNodeInfix>;
        }
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let ParseOk { result: head, state } = parse_Whitespace(state, tracer, cache)
                .and_then(|ParseOk { state, .. }| parse_ValueNode(state, tracer, cache))?;
            let ParseOk { result: mut infix, state } = part_1::parse(state, tracer, cache)?;
            Ok(ParseOk { result: Parsed { head, infix }, state })
        }
        pub struct Parsed {
            pub head: ValueNode,
            pub infix: Vec<ExpressionNodeInfix>,
        }
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::ExpressionNode> {
            let result = parse(state, tracer, cache)?.map(|r| super::ExpressionNode { head: r.head, infix: r.infix });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_ExpressionNode<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, ExpressionNode> {
        tracer.run_traced("ExpressionNode", state, |state, tracer| ExpressionNode_impl::rule_parser(state, tracer, cache))
    }
    mod ExpressionNodeInfix_impl {
        use super::*;
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let ParseOk { result: op, state } =
                parse_Whitespace(state, tracer, cache).and_then(|ParseOk { state, .. }| parse_Infix(state, tracer, cache))?;
            let ParseOk { result: value, state } = parse_Whitespace(state, tracer, cache)
                .and_then(|ParseOk { state, .. }| parse_ValueNode(state, tracer, cache))?;
            Ok(ParseOk { result: Parsed { op, value }, state })
        }
        pub struct Parsed {
            pub op: Infix,
            pub value: ValueNode,
        }
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::ExpressionNodeInfix> {
            let result = parse(state, tracer, cache)?.map(|r| super::ExpressionNodeInfix { op: r.op, value: r.value });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_ExpressionNodeInfix<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, ExpressionNodeInfix> {
        tracer.run_traced("ExpressionNodeInfix", state, |state, tracer| {
            ExpressionNodeInfix_impl::rule_parser(state, tracer, cache)
        })
    }
    mod Infix_impl {
        use super::*;
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            parse_Whitespace(state, tracer, cache)
                .and_then(|ParseOk { state, .. }| parse_character_literal(state, '+'))
                .discard_result()
        }
        pub type Parsed = ();
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Infix> {
            let result = parse(state.clone(), tracer, cache)?.map_with_state(|_, new_state| {
                let string = state.slice_until(new_state).to_string();
                string
            });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_Infix<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, Infix> {
        tracer.run_traced("Infix", state, |state, tracer| Infix_impl::rule_parser(state, tracer, cache))
    }
    mod ValueNode_impl {
        use super::*;
        #[inline(always)]
        pub fn parse<'a>(
            mut state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            ChoiceHelper::new(state)
                .choice(|state| {
                    parse_Whitespace(state, tracer, cache)
                        .and_then(|ParseOk { state, .. }| parse_BooleanNode(state, tracer, cache))
                        .map_inner(Parsed__override::BooleanNode)
                })
                .choice(|state| {
                    parse_Whitespace(state, tracer, cache)
                        .and_then(|ParseOk { state, .. }| parse_NumberNode(state, tracer, cache))
                        .map_inner(Parsed__override::NumberNode)
                })
                .choice(|state| {
                    parse_Whitespace(state, tracer, cache)
                        .and_then(|ParseOk { state, .. }| parse_IdentifierNode(state, tracer, cache))
                        .map_inner(Parsed__override::IdentifierNode)
                })
                .end()
        }
        pub type Parsed = Parsed__override;
        use super::ValueNode as Parsed__override;
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::ValueNode> {
            let result = parse(state, tracer, cache)?;
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_ValueNode<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, ValueNode> {
        tracer.run_traced("ValueNode", state, |state, tracer| ValueNode_impl::rule_parser(state, tracer, cache))
    }
    mod SlotL_impl {
        use super::*;
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let ParseOk { state, .. } = parse_string_literal(state, "{%").discard_result()?;
            let ParseOk { result: trim, state } = parse_TrimMode(state.clone(), tracer, cache)
                .map_inner(Some)
                .or_else(|err| Ok(ParseOk { result: Default::default(), state: state.record_error(err) }))?;
            Ok(ParseOk { result: trim, state })
        }
        pub type Parsed = Option<TrimMode>;
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::SlotL> {
            let result = parse(state.clone(), tracer, cache)?
                .map_with_state(|r, new_state| super::SlotL { trim: r, position: state.range_until(new_state) });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_SlotL<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, SlotL> {
        tracer.run_traced("SlotL", state, |state, tracer| SlotL_impl::rule_parser(state, tracer, cache))
    }
    impl PegPosition for SlotL {
        fn position(&self) -> &std::ops::Range<usize> {
            &self.position
        }
    }
    mod SlotR_impl {
        use super::*;
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let ParseOk { result: trim, state } = parse_TrimMode(state.clone(), tracer, cache)
                .map_inner(Some)
                .or_else(|err| Ok(ParseOk { result: Default::default(), state: state.record_error(err) }))?;
            let ParseOk { state, .. } = parse_string_literal(state, "%}").discard_result()?;
            Ok(ParseOk { result: trim, state })
        }
        pub type Parsed = Option<TrimMode>;
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::SlotR> {
            let result = parse(state.clone(), tracer, cache)?
                .map_with_state(|r, new_state| super::SlotR { trim: r, position: state.range_until(new_state) });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_SlotR<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, SlotR> {
        tracer.run_traced("SlotR", state, |state, tracer| SlotR_impl::rule_parser(state, tracer, cache))
    }
    impl PegPosition for SlotR {
        fn position(&self) -> &std::ops::Range<usize> {
            &self.position
        }
    }
    #[inline]
    pub(super) fn parse_TrimMode<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, TrimMode> {
        if let Ok(result) = parse_character_literal(state.clone(), '_') {
            return Ok(result);
        }
        if let Ok(result) = parse_character_literal(state.clone(), '-') {
            return Ok(result);
        }
        if let Ok(result) = parse_character_literal(state.clone(), '=') {
            return Ok(result);
        }
        if let Ok(result) = parse_character_literal(state.clone(), '!') {
            return Ok(result);
        }
        Err(state.report_error(ParseErrorSpecifics::ExpectedCharacterClass { name: "TrimMode" }))
    }
    mod BooleanNode_impl {
        use super::*;
        #[inline(always)]
        pub fn parse<'a>(
            mut state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            ChoiceHelper::new(state)
                .choice(|state| {
                    parse_Whitespace(state, tracer, cache)
                        .and_then(|ParseOk { state, .. }| parse_string_literal(state, "true"))
                        .discard_result()
                })
                .choice(|state| {
                    parse_Whitespace(state, tracer, cache)
                        .and_then(|ParseOk { state, .. }| parse_string_literal(state, "false"))
                        .discard_result()
                })
                .end()
        }
        pub type Parsed = ();
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, BooleanNode> {
            let result = parse(state.clone(), tracer, cache)?.map_with_state(|_, new_state| {
                let string = state.slice_until(new_state).to_string();
                BooleanNode { string, position: state.range_until(new_state) }
            });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_BooleanNode<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, BooleanNode> {
        tracer.run_traced("BooleanNode", state, |state, tracer| BooleanNode_impl::rule_parser(state, tracer, cache))
    }
    impl PegPosition for BooleanNode {
        fn position(&self) -> &std::ops::Range<usize> {
            &self.position
        }
    }
    mod IdentifierNode_impl {
        use super::*;
        mod part_1 {
            use super::*;
            mod closure {
                use super::*;
            }
            #[inline(always)]
            pub fn parse<'a>(
                state: ParseState<'a>,
                tracer: impl ParseTracer,
                cache: &mut ParseCache<'a>,
            ) -> ParseResult<'a, Parsed> {
                let mut iterations: usize = 0;
                let mut state = state;
                loop {
                    match ChoiceHelper::new(state.clone())
                        .choice(|state| parse_XID_CONTINUE(state, tracer, cache).discard_result())
                        .choice(|state| parse_character_literal(state, '-').discard_result())
                        .end()
                    {
                        Ok(ParseOk { result: __result, state: new_state, .. }) => {
                            state = new_state;
                        }
                        Err(err) => {
                            state = state.record_error(err);
                            break;
                        }
                    }
                    iterations += 1;
                }
                Ok(ParseOk { result: (), state })
            }
            pub type Parsed = ();
        }
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let ParseOk { state, .. } = ChoiceHelper::new(state)
                .choice(|state| parse_XID_START(state, tracer, cache).discard_result())
                .choice(|state| parse_character_literal(state, '_').discard_result())
                .choice(|state| parse_character_literal(state, '-').discard_result())
                .end()?;
            let ParseOk { state, .. } = part_1::parse(state, tracer, cache)?;
            Ok(ParseOk { result: (), state })
        }
        pub type Parsed = ();
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, IdentifierNode> {
            let result = parse(state.clone(), tracer, cache)?.map_with_state(|_, new_state| {
                let string = state.slice_until(new_state).to_string();
                IdentifierNode { string, position: state.range_until(new_state) }
            });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_IdentifierNode<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, IdentifierNode> {
        tracer.run_traced("IdentifierNode", state, |state, tracer| IdentifierNode_impl::rule_parser(state, tracer, cache))
    }
    impl PegPosition for IdentifierNode {
        fn position(&self) -> &std::ops::Range<usize> {
            &self.position
        }
    }
    #[inline]
    pub(super) fn parse_XID_START<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, XID_START> {
        if let Some(c) = state.s().chars().next() {
            if !unicode_ident::is_xid_start(c) {
                return Err(state.report_error(ParseErrorSpecifics::ExpectedCharacterClass { name: "XID_START" }));
            }
        }
        else {
            return Err(state.report_error(ParseErrorSpecifics::ExpectedCharacterClass { name: "XID_START" }));
        }
        if let Ok(result) = parse_char(state.clone(), tracer, cache) {
            return Ok(result);
        }
        Err(state.report_error(ParseErrorSpecifics::ExpectedCharacterClass { name: "XID_START" }))
    }
    #[inline]
    pub(super) fn parse_XID_CONTINUE<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, XID_CONTINUE> {
        if let Some(c) = state.s().chars().next() {
            if !unicode_ident::is_xid_continue(c) {
                return Err(state.report_error(ParseErrorSpecifics::ExpectedCharacterClass { name: "XID_CONTINUE" }));
            }
        }
        else {
            return Err(state.report_error(ParseErrorSpecifics::ExpectedCharacterClass { name: "XID_CONTINUE" }));
        }
        if let Ok(result) = parse_char(state.clone(), tracer, cache) {
            return Ok(result);
        }
        Err(state.report_error(ParseErrorSpecifics::ExpectedCharacterClass { name: "XID_CONTINUE" }))
    }
    mod NumberNode_impl {
        use super::*;
        mod choice_0 {
            use super::*;
            mod part_0 {
                use super::*;
                mod closure {
                    use super::*;
                }
                #[inline(always)]
                pub fn parse<'a>(
                    state: ParseState<'a>,
                    tracer: impl ParseTracer,
                    cache: &mut ParseCache<'a>,
                ) -> ParseResult<'a, Parsed> {
                    let mut iterations: usize = 0;
                    let mut state = state;
                    loop {
                        match parse_Whitespace(state.clone(), tracer, cache)
                            .and_then(|ParseOk { state, .. }| parse_character_range(state, '0', '9'))
                            .discard_result()
                        {
                            Ok(ParseOk { result: __result, state: new_state, .. }) => {
                                state = new_state;
                            }
                            Err(err) => {
                                state = state.record_error(err);
                                break;
                            }
                        }
                        iterations += 1;
                    }
                    if iterations == 0 {
                        return Err(state.report_farthest_error());
                    }
                    Ok(ParseOk { result: (), state })
                }
                pub type Parsed = ();
            }
            mod part_1 {
                use super::*;
                mod optional {
                    use super::*;
                    mod part_1 {
                        use super::*;
                        mod closure {
                            use super::*;
                        }
                        #[inline(always)]
                        pub fn parse<'a>(
                            state: ParseState<'a>,
                            tracer: impl ParseTracer,
                            cache: &mut ParseCache<'a>,
                        ) -> ParseResult<'a, Parsed> {
                            let mut iterations: usize = 0;
                            let mut state = state;
                            loop {
                                match parse_Whitespace(state.clone(), tracer, cache)
                                    .and_then(|ParseOk { state, .. }| parse_character_range(state, '0', '9'))
                                    .discard_result()
                                {
                                    Ok(ParseOk { result: __result, state: new_state, .. }) => {
                                        state = new_state;
                                    }
                                    Err(err) => {
                                        state = state.record_error(err);
                                        break;
                                    }
                                }
                                iterations += 1;
                            }
                            if iterations == 0 {
                                return Err(state.report_farthest_error());
                            }
                            Ok(ParseOk { result: (), state })
                        }
                        pub type Parsed = ();
                    }
                    #[inline(always)]
                    pub fn parse<'a>(
                        state: ParseState<'a>,
                        tracer: impl ParseTracer,
                        cache: &mut ParseCache<'a>,
                    ) -> ParseResult<'a, Parsed> {
                        let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)
                            .and_then(|ParseOk { state, .. }| parse_character_literal(state, '.'))
                            .discard_result()?;
                        let ParseOk { state, .. } = part_1::parse(state, tracer, cache)?;
                        Ok(ParseOk { result: (), state })
                    }
                    pub type Parsed = ();
                }
                #[inline(always)]
                pub fn parse<'a>(
                    state: ParseState<'a>,
                    tracer: impl ParseTracer,
                    cache: &mut ParseCache<'a>,
                ) -> ParseResult<'a, Parsed> {
                    optional::parse(state.clone(), tracer, cache)
                        .or_else(|err| Ok(ParseOk { result: (), state: state.record_error(err) }))
                }
                pub type Parsed = ();
            }
            mod part_2 {
                use super::*;
                mod optional {
                    use super::*;
                    mod part_2 {
                        use super::*;
                        mod closure {
                            use super::*;
                        }
                        #[inline(always)]
                        pub fn parse<'a>(
                            state: ParseState<'a>,
                            tracer: impl ParseTracer,
                            cache: &mut ParseCache<'a>,
                        ) -> ParseResult<'a, Parsed> {
                            let mut iterations: usize = 0;
                            let mut state = state;
                            loop {
                                match parse_Whitespace(state.clone(), tracer, cache)
                                    .and_then(|ParseOk { state, .. }| parse_character_range(state, '0', '9'))
                                    .discard_result()
                                {
                                    Ok(ParseOk { result: __result, state: new_state, .. }) => {
                                        state = new_state;
                                    }
                                    Err(err) => {
                                        state = state.record_error(err);
                                        break;
                                    }
                                }
                                iterations += 1;
                            }
                            if iterations == 0 {
                                return Err(state.report_farthest_error());
                            }
                            Ok(ParseOk { result: (), state })
                        }
                        pub type Parsed = ();
                    }
                    #[inline(always)]
                    pub fn parse<'a>(
                        state: ParseState<'a>,
                        tracer: impl ParseTracer,
                        cache: &mut ParseCache<'a>,
                    ) -> ParseResult<'a, Parsed> {
                        let ParseOk { state, .. } = ChoiceHelper::new(state)
                            .choice(|state| {
                                parse_Whitespace(state, tracer, cache)
                                    .and_then(|ParseOk { state, .. }| parse_string_literal(state, "**"))
                                    .discard_result()
                            })
                            .choice(|state| {
                                parse_Whitespace(state, tracer, cache)
                                    .and_then(|ParseOk { state, .. }| parse_character_literal(state, 'e'))
                                    .discard_result()
                            })
                            .choice(|state| {
                                parse_Whitespace(state, tracer, cache)
                                    .and_then(|ParseOk { state, .. }| parse_character_literal(state, 'E'))
                                    .discard_result()
                            })
                            .end()?;
                        let ParseOk { state, .. } = ChoiceHelper::new(state.clone())
                            .choice(|state| {
                                parse_Whitespace(state, tracer, cache)
                                    .and_then(|ParseOk { state, .. }| parse_character_literal(state, '+'))
                                    .discard_result()
                            })
                            .choice(|state| {
                                parse_Whitespace(state, tracer, cache)
                                    .and_then(|ParseOk { state, .. }| parse_character_literal(state, '-'))
                                    .discard_result()
                            })
                            .end()
                            .or_else(|err| Ok(ParseOk { result: (), state: state.record_error(err) }))?;
                        let ParseOk { state, .. } = part_2::parse(state, tracer, cache)?;
                        Ok(ParseOk { result: (), state })
                    }
                    pub type Parsed = ();
                }
                #[inline(always)]
                pub fn parse<'a>(
                    state: ParseState<'a>,
                    tracer: impl ParseTracer,
                    cache: &mut ParseCache<'a>,
                ) -> ParseResult<'a, Parsed> {
                    optional::parse(state.clone(), tracer, cache)
                        .or_else(|err| Ok(ParseOk { result: (), state: state.record_error(err) }))
                }
                pub type Parsed = ();
            }
            #[inline(always)]
            pub fn parse<'a>(
                state: ParseState<'a>,
                tracer: impl ParseTracer,
                cache: &mut ParseCache<'a>,
            ) -> ParseResult<'a, Parsed> {
                let ParseOk { state, .. } = part_0::parse(state, tracer, cache)?;
                let ParseOk { state, .. } = part_1::parse(state, tracer, cache)?;
                let ParseOk { state, .. } = part_2::parse(state, tracer, cache)?;
                Ok(ParseOk { result: (), state })
            }
            pub type Parsed = ();
        }
        mod choice_1 {
            use super::*;
            mod part_1 {
                use super::*;
                mod closure {
                    use super::*;
                }
                #[inline(always)]
                pub fn parse<'a>(
                    state: ParseState<'a>,
                    tracer: impl ParseTracer,
                    cache: &mut ParseCache<'a>,
                ) -> ParseResult<'a, Parsed> {
                    let mut iterations: usize = 0;
                    let mut state = state;
                    loop {
                        match parse_Whitespace(state.clone(), tracer, cache)
                            .and_then(|ParseOk { state, .. }| parse_character_range(state, '0', '9'))
                            .discard_result()
                        {
                            Ok(ParseOk { result: __result, state: new_state, .. }) => {
                                state = new_state;
                            }
                            Err(err) => {
                                state = state.record_error(err);
                                break;
                            }
                        }
                        iterations += 1;
                    }
                    if iterations == 0 {
                        return Err(state.report_farthest_error());
                    }
                    Ok(ParseOk { result: (), state })
                }
                pub type Parsed = ();
            }
            #[inline(always)]
            pub fn parse<'a>(
                state: ParseState<'a>,
                tracer: impl ParseTracer,
                cache: &mut ParseCache<'a>,
            ) -> ParseResult<'a, Parsed> {
                let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)
                    .and_then(|ParseOk { state, .. }| parse_character_literal(state, '.'))
                    .discard_result()?;
                let ParseOk { state, .. } = part_1::parse(state, tracer, cache)?;
                Ok(ParseOk { result: (), state })
            }
            pub type Parsed = ();
        }
        #[inline(always)]
        pub fn parse<'a>(
            mut state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            ChoiceHelper::new(state)
                .choice(|state| choice_0::parse(state, tracer, cache))
                .choice(|state| choice_1::parse(state, tracer, cache))
                .end()
        }
        pub type Parsed = ();
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, NumberNode> {
            let result = parse(state.clone(), tracer, cache)?.map_with_state(|_, new_state| {
                let string = state.slice_until(new_state).to_string();
                NumberNode { string, position: state.range_until(new_state) }
            });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_NumberNode<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, NumberNode> {
        tracer.run_traced("NumberNode", state, |state, tracer| NumberNode_impl::rule_parser(state, tracer, cache))
    }
    impl PegPosition for NumberNode {
        fn position(&self) -> &std::ops::Range<usize> {
            &self.position
        }
    }
    mod UnicodeText_impl {
        use super::*;
        mod closure {
            use super::*;
            mod part_0 {
                use super::*;
                mod negative_lookahead {
                    use super::*;
                    #[inline(always)]
                    pub fn parse<'a>(
                        mut state: ParseState<'a>,
                        tracer: impl ParseTracer,
                        cache: &mut ParseCache<'a>,
                    ) -> ParseResult<'a, Parsed> {
                        ChoiceHelper::new(state)
                            .choice(|state| {
                                parse_Whitespace(state, tracer, cache)
                                    .and_then(|ParseOk { state, .. }| parse_string_literal(state, "{%"))
                                    .discard_result()
                            })
                            .choice(|state| {
                                parse_Whitespace(state, tracer, cache)
                                    .and_then(|ParseOk { state, .. }| parse_string_literal(state, "{#"))
                                    .discard_result()
                            })
                            .end()
                    }
                    pub type Parsed = ();
                }
                #[inline(always)]
                pub fn parse<'a>(
                    state: ParseState<'a>,
                    tracer: impl ParseTracer,
                    cache: &mut ParseCache<'a>,
                ) -> ParseResult<'a, Parsed> {
                    match negative_lookahead::parse(state.clone(), tracer, cache) {
                        Ok(_) => Err(state.report_error(ParseErrorSpecifics::NegativeLookaheadFailed)),
                        Err(_) => Ok(ParseOk { result: (), state }),
                    }
                }
                pub type Parsed = ();
            }
            #[inline(always)]
            pub fn parse<'a>(
                state: ParseState<'a>,
                tracer: impl ParseTracer,
                cache: &mut ParseCache<'a>,
            ) -> ParseResult<'a, Parsed> {
                let ParseOk { state, .. } = part_0::parse(state, tracer, cache)?;
                let ParseOk { state, .. } = parse_Whitespace(state, tracer, cache)
                    .and_then(|ParseOk { state, .. }| parse_char(state, tracer, cache))
                    .discard_result()?;
                Ok(ParseOk { result: (), state })
            }
            pub type Parsed = ();
        }
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let mut iterations: usize = 0;
            let mut state = state;
            loop {
                match closure::parse(state.clone(), tracer, cache) {
                    Ok(ParseOk { result: __result, state: new_state, .. }) => {
                        state = new_state;
                    }
                    Err(err) => {
                        state = state.record_error(err);
                        break;
                    }
                }
                iterations += 1;
            }
            if iterations == 0 {
                return Err(state.report_farthest_error());
            }
            Ok(ParseOk { result: (), state })
        }
        pub type Parsed = ();
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, UnicodeText> {
            let result = parse(state.clone(), tracer, cache)?.map_with_state(|_, new_state| {
                let string = state.slice_until(new_state).to_string();
                UnicodeText { string, position: state.range_until(new_state) }
            });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_UnicodeText<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, UnicodeText> {
        tracer.run_traced("UnicodeText", state, |state, tracer| UnicodeText_impl::rule_parser(state, tracer, cache))
    }
    impl PegPosition for UnicodeText {
        fn position(&self) -> &std::ops::Range<usize> {
            &self.position
        }
    }
    mod Comment_impl {
        use super::*;
        mod part_1 {
            use super::*;
            mod closure {
                use super::*;
                mod choice_0 {
                    use super::*;
                    mod negative_lookahead {
                        use super::*;
                        #[inline(always)]
                        pub fn parse<'a>(
                            state: ParseState<'a>,
                            tracer: impl ParseTracer,
                            cache: &mut ParseCache<'a>,
                        ) -> ParseResult<'a, Parsed> {
                            parse_CommentR(state, tracer, cache).discard_result()
                        }
                        pub type Parsed = ();
                    }
                    #[inline(always)]
                    pub fn parse<'a>(
                        state: ParseState<'a>,
                        tracer: impl ParseTracer,
                        cache: &mut ParseCache<'a>,
                    ) -> ParseResult<'a, Parsed> {
                        match negative_lookahead::parse(state.clone(), tracer, cache) {
                            Ok(_) => Err(state.report_error(ParseErrorSpecifics::NegativeLookaheadFailed)),
                            Err(_) => Ok(ParseOk { result: (), state }),
                        }
                    }
                    pub type Parsed = ();
                }
                #[inline(always)]
                pub fn parse<'a>(
                    mut state: ParseState<'a>,
                    tracer: impl ParseTracer,
                    cache: &mut ParseCache<'a>,
                ) -> ParseResult<'a, Parsed> {
                    ChoiceHelper::new(state)
                        .choice(|state| choice_0::parse(state, tracer, cache))
                        .choice(|state| parse_char(state, tracer, cache).discard_result())
                        .end()
                }
                pub type Parsed = ();
            }
            #[inline(always)]
            pub fn parse<'a>(
                state: ParseState<'a>,
                tracer: impl ParseTracer,
                cache: &mut ParseCache<'a>,
            ) -> ParseResult<'a, Parsed> {
                let mut iterations: usize = 0;
                let mut state = state;
                loop {
                    match closure::parse(state.clone(), tracer, cache) {
                        Ok(ParseOk { result: __result, state: new_state, .. }) => {
                            state = new_state;
                        }
                        Err(err) => {
                            state = state.record_error(err);
                            break;
                        }
                    }
                    iterations += 1;
                }
                if iterations == 0 {
                    return Err(state.report_farthest_error());
                }
                Ok(ParseOk { result: (), state })
            }
            pub type Parsed = ();
        }
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let ParseOk { result: left, state } = parse_CommentL(state, tracer, cache)?;
            let ParseOk { state, .. } = part_1::parse(state, tracer, cache)?;
            let ParseOk { result: right, state } = parse_CommentR(state, tracer, cache)?;
            Ok(ParseOk { result: Parsed { left, right }, state })
        }
        pub struct Parsed {
            pub left: CommentL,
            pub right: CommentR,
        }
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::Comment> {
            let result = parse(state, tracer, cache)?.map(|r| super::Comment { left: r.left, right: r.right });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_Comment<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, Comment> {
        tracer.run_traced("Comment", state, |state, tracer| Comment_impl::rule_parser(state, tracer, cache))
    }
    mod CommentL_impl {
        use super::*;
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let ParseOk { state, .. } = parse_string_literal(state, "{#").discard_result()?;
            let ParseOk { result: trim, state } = parse_TrimMode(state.clone(), tracer, cache)
                .map_inner(Some)
                .or_else(|err| Ok(ParseOk { result: Default::default(), state: state.record_error(err) }))?;
            Ok(ParseOk { result: trim, state })
        }
        pub type Parsed = Option<TrimMode>;
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::CommentL> {
            let result = parse(state.clone(), tracer, cache)?
                .map_with_state(|r, new_state| super::CommentL { trim: r, position: state.range_until(new_state) });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_CommentL<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, CommentL> {
        tracer.run_traced("CommentL", state, |state, tracer| CommentL_impl::rule_parser(state, tracer, cache))
    }
    impl PegPosition for CommentL {
        fn position(&self) -> &std::ops::Range<usize> {
            &self.position
        }
    }
    mod CommentR_impl {
        use super::*;
        #[inline(always)]
        pub fn parse<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, Parsed> {
            let ParseOk { result: trim, state } = parse_TrimMode(state.clone(), tracer, cache)
                .map_inner(Some)
                .or_else(|err| Ok(ParseOk { result: Default::default(), state: state.record_error(err) }))?;
            let ParseOk { state, .. } = parse_string_literal(state, "#}").discard_result()?;
            Ok(ParseOk { result: trim, state })
        }
        pub type Parsed = Option<TrimMode>;
        #[inline(always)]
        pub fn rule_parser<'a>(
            state: ParseState<'a>,
            tracer: impl ParseTracer,
            cache: &mut ParseCache<'a>,
        ) -> ParseResult<'a, super::CommentR> {
            let result = parse(state.clone(), tracer, cache)?
                .map_with_state(|r, new_state| super::CommentR { trim: r, position: state.range_until(new_state) });
            Ok(result)
        }
    }
    #[inline]
    pub(super) fn parse_CommentR<'a>(
        state: ParseState<'a>,
        tracer: impl ParseTracer,
        cache: &mut ParseCache<'a>,
    ) -> ParseResult<'a, CommentR> {
        tracer.run_traced("CommentR", state, |state, tracer| CommentR_impl::rule_parser(state, tracer, cache))
    }
    impl PegPosition for CommentR {
        fn position(&self) -> &std::ops::Range<usize> {
            &self.position
        }
    }
}
