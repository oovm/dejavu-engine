grammar Nexus {
file: '*.djv'
}

entry class Root {
    Element*
}

union Element {
    | TextElements   #Text
    | TemplateExport #Export
    | TemplateIf     #If
}
// === text area === ---------------------------------------------------------------------------------------------------
union TextElements {
    | TEMPLATE_E #Escape
    | TEXT_SPACE #TextSpace
    | TEXT_WORD  #TextWord
}

@style(escape)
class TEMPLATE_E {
    '<<%'
}

class TEXT_SPACE {
    /\p{White_Space}+/
}
class TEXT_WORD {
    /[^<\p{White_Space}]+/
}
// === template token === ----------------------------------------------------------------------------------------------
@style(operator)
atomic class TEMPLATE_L {
    '<%' SPACE_CONTROL?
}
atomic class TEMPLATE_R {
    SPACE_CONTROL? '%>'
}
union SPACE_CONTROL {
    | '_' #A
    | '-' #B
    | '~' #C
    | '=' #D
}
@style(keyword)
token {
    KW_END: 'end'
}
// === template export === -------------------------------------------------------------------------------------------------
class TemplateExport ^ {
    TEMPLATE_L exports:ExportItem* TEMPLATE_R
}
class ExportItem ^ {
    KW_EXPORT name:Identifier
    (KW_TO language:Identifier)?
    (KW_BY KW_CLASS class:NamepathFree)?
    (KW_BY KW_TRAIT trait:NamepathFree?)?
}
@style(keyword)
token {
    KW_EXPORT: 'export'
    KW_CLASS: 'class'
    KW_TRAIT: 'trait'
    KW_TO: 'to'
    KW_BY: 'by'
}
// === template if === -------------------------------------------------------------------------------------------------
atomic class TemplateIf {
    IfBegin IfElseIf* IfElse? ^IfEnd
}
atomic class IfBegin ^ {
    TEMPLATE_L ~ KW_IF ~ condition:Atomic ~ TEMPLATE_R text:TextElements*
}
atomic class IfElse ^ {
    TEMPLATE_L ~ KW_ELSE ~ TEMPLATE_R text:TextElements*
}
atomic class IfElseIf ^ {
    TEMPLATE_L ~ KW_ELSE ~ KW_IF ~ TEMPLATE_R text:TextElements*
}
atomic class IfEnd ^ {
    TEMPLATE_L ~ KW_END ~ KW_IF? ~ TEMPLATE_R
}
@style(keyword)
token {
    KW_IF: 'if'
    KW_ELSE: 'else'
}
// === text area === ---------------------------------------------------------------------------------------------------

// === string === ------------------------------------------------------------------------------------------------------
union Atomic {
    | Boolean
    | Identifier
    | Number
}
// === string === ------------------------------------------------------------------------------------------------------
union String {
    | '"' '"' #SingleQuote
    | "'" "'" #DoubleQuote
}
// === number === ------------------------------------------------------------------------------------------------------
class Number {
    /0|[1-9][0-9]/
}
// === identifier === --------------------------------------------------------------------------------------------------
class NamepathFree -> Namepath {
    Identifier (('.' | '::') Identifier)*
}
class Namepath {
    Identifier ('::' Identifier)*
}
class Identifier {
    /[_\p{XID_start}]\p{XID_continue}*/
}
union Boolean {
    | 'true'  #True
    | 'false' #False
}
// === ignores === -----------------------------------------------------------------------------------------------------
ignore class WhiteSpace {
    /\p{White_Space}+/
}

//@style(comment)
//ignore union Comment {
//    | @comment_line('//')
//    | @comment_line('#')
//    | @comment_block('/*', '*/', nest: false)
//}

